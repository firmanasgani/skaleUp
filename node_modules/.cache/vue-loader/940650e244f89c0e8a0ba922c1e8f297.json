{"remainingRequest":"C:\\skaleup\\skaleUp\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\skaleup\\skaleUp\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\skaleup\\skaleUp\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\skaleup\\skaleUp\\src\\components\\insight\\Insightone.vue?vue&type=template&id=5f32da55&","dependencies":[{"path":"C:\\skaleup\\skaleUp\\src\\components\\insight\\Insightone.vue","mtime":1644491304528},{"path":"C:\\skaleup\\skaleUp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1644491286675},{"path":"C:\\skaleup\\skaleUp\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1644491301950},{"path":"C:\\skaleup\\skaleUp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1644491286675},{"path":"C:\\skaleup\\skaleUp\\node_modules\\vue-loader\\lib\\index.js","mtime":1644491301947}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}